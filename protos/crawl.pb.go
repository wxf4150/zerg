// Code generated by protoc-gen-go. DO NOT EDIT.
// source: crawl.proto

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
	crawl.proto

It has these top-level messages:
	CrawlRequest
	KV
	CrawlResponse
	Metadata
*/
package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Method int32

const (
	Method_GET  Method = 0
	Method_HEAD Method = 1
	Method_POST Method = 2
)

var Method_name = map[int32]string{
	0: "GET",
	1: "HEAD",
	2: "POST",
}
var Method_value = map[string]int32{
	"GET":  0,
	"HEAD": 1,
	"POST": 2,
}

func (x Method) String() string {
	return proto.EnumName(Method_name, int32(x))
}
func (Method) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CrawlRequest struct {
	// 以 http:// 或者 https:// 开头的网址
	Url string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	// 抓取超时限制，单位毫秒，设为 0 时无超时
	Timeout int64 `protobuf:"varint,2,opt,name=timeout" json:"timeout,omitempty"`
	// 是否仅返回 metadata 而忽略 content
	OnlyReturnMetadata bool `protobuf:"varint,5,opt,name=only_return_metadata,json=onlyReturnMetadata" json:"only_return_metadata,omitempty"`
	// 请求的自定义 header
	Header []*KV `protobuf:"bytes,6,rep,name=header" json:"header,omitempty"`
	// 请求方法
	Method Method `protobuf:"varint,7,opt,name=method,enum=protos.Method" json:"method,omitempty"`
	// POST body，仅当请求类型为 POST 时有效
	PostBody      string `protobuf:"bytes,8,opt,name=post_body,json=postBody" json:"post_body,omitempty"`
	BodyType      string `protobuf:"bytes,9,opt,name=body_type,json=bodyType" json:"body_type,omitempty"`
	ExpectCharset string `protobuf:"bytes,10,opt,name=expect_charset,json=expectCharset" json:"expect_charset,omitempty"`
}

func (m *CrawlRequest) Reset()                    { *m = CrawlRequest{} }
func (m *CrawlRequest) String() string            { return proto.CompactTextString(m) }
func (*CrawlRequest) ProtoMessage()               {}
func (*CrawlRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CrawlRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *CrawlRequest) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *CrawlRequest) GetOnlyReturnMetadata() bool {
	if m != nil {
		return m.OnlyReturnMetadata
	}
	return false
}

func (m *CrawlRequest) GetHeader() []*KV {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *CrawlRequest) GetMethod() Method {
	if m != nil {
		return m.Method
	}
	return Method_GET
}

func (m *CrawlRequest) GetPostBody() string {
	if m != nil {
		return m.PostBody
	}
	return ""
}

func (m *CrawlRequest) GetBodyType() string {
	if m != nil {
		return m.BodyType
	}
	return ""
}

func (m *CrawlRequest) GetExpectCharset() string {
	if m != nil {
		return m.ExpectCharset
	}
	return ""
}

type KV struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *KV) Reset()                    { *m = KV{} }
func (m *KV) String() string            { return proto.CompactTextString(m) }
func (*KV) ProtoMessage()               {}
func (*KV) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *KV) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KV) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type CrawlResponse struct {
	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	Content  string    `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
}

func (m *CrawlResponse) Reset()                    { *m = CrawlResponse{} }
func (m *CrawlResponse) String() string            { return proto.CompactTextString(m) }
func (*CrawlResponse) ProtoMessage()               {}
func (*CrawlResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CrawlResponse) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *CrawlResponse) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type Metadata struct {
	Length     uint32 `protobuf:"varint,1,opt,name=length" json:"length,omitempty"`
	Header     []*KV  `protobuf:"bytes,3,rep,name=header" json:"header,omitempty"`
	Status     string `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
	StatusCode int32  `protobuf:"varint,5,opt,name=status_code,json=statusCode" json:"status_code,omitempty"`
}

func (m *Metadata) Reset()                    { *m = Metadata{} }
func (m *Metadata) String() string            { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()               {}
func (*Metadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Metadata) GetLength() uint32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *Metadata) GetHeader() []*KV {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Metadata) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Metadata) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func init() {
	proto.RegisterType((*CrawlRequest)(nil), "protos.CrawlRequest")
	proto.RegisterType((*KV)(nil), "protos.KV")
	proto.RegisterType((*CrawlResponse)(nil), "protos.CrawlResponse")
	proto.RegisterType((*Metadata)(nil), "protos.Metadata")
	proto.RegisterEnum("protos.Method", Method_name, Method_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Crawl service

type CrawlClient interface {
	Crawl(ctx context.Context, in *CrawlRequest, opts ...grpc.CallOption) (*CrawlResponse, error)
}

type crawlClient struct {
	cc *grpc.ClientConn
}

func NewCrawlClient(cc *grpc.ClientConn) CrawlClient {
	return &crawlClient{cc}
}

func (c *crawlClient) Crawl(ctx context.Context, in *CrawlRequest, opts ...grpc.CallOption) (*CrawlResponse, error) {
	out := new(CrawlResponse)
	err := grpc.Invoke(ctx, "/protos.Crawl/Crawl", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Crawl service

type CrawlServer interface {
	Crawl(context.Context, *CrawlRequest) (*CrawlResponse, error)
}

func RegisterCrawlServer(s *grpc.Server, srv CrawlServer) {
	s.RegisterService(&_Crawl_serviceDesc, srv)
}

func _Crawl_Crawl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrawlServer).Crawl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Crawl/Crawl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrawlServer).Crawl(ctx, req.(*CrawlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Crawl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Crawl",
	HandlerType: (*CrawlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Crawl",
			Handler:    _Crawl_Crawl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "crawl.proto",
}

func init() { proto.RegisterFile("crawl.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 428 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x51, 0x6b, 0xd4, 0x40,
	0x10, 0xc7, 0x9b, 0xa4, 0x97, 0xcb, 0xcd, 0x79, 0x47, 0x58, 0xce, 0xb2, 0xe8, 0x83, 0x21, 0x50,
	0x09, 0x52, 0x8a, 0x9c, 0xe0, 0xab, 0xd8, 0xb3, 0x58, 0xa8, 0x45, 0x59, 0x8f, 0xf6, 0x31, 0xa4,
	0xc9, 0x60, 0xa4, 0xb9, 0x6c, 0xcc, 0x4e, 0xd4, 0x3c, 0xf9, 0x39, 0x7c, 0xf5, 0x93, 0xca, 0xee,
	0x26, 0xc7, 0x21, 0xf8, 0x74, 0x33, 0xbf, 0xff, 0xdc, 0x66, 0xf2, 0xcb, 0xc2, 0x3c, 0x6f, 0xb3,
	0x1f, 0xd5, 0x79, 0xd3, 0x4a, 0x92, 0xcc, 0x37, 0x3f, 0x2a, 0xfe, 0xed, 0xc2, 0xa3, 0x8d, 0xe6,
	0x02, 0xbf, 0x75, 0xa8, 0x88, 0x85, 0xe0, 0x75, 0x6d, 0xc5, 0x9d, 0xc8, 0x49, 0x66, 0x42, 0x97,
	0x8c, 0xc3, 0x94, 0xbe, 0xee, 0x50, 0x76, 0xc4, 0xdd, 0xc8, 0x49, 0x3c, 0x31, 0xb6, 0xec, 0x25,
	0xac, 0x64, 0x5d, 0xf5, 0x69, 0x8b, 0xd4, 0xb5, 0x75, 0xba, 0x43, 0xca, 0x8a, 0x8c, 0x32, 0x3e,
	0x89, 0x9c, 0x24, 0x10, 0x4c, 0x67, 0xc2, 0x44, 0x37, 0x43, 0xc2, 0x62, 0xf0, 0x4b, 0xcc, 0x0a,
	0x6c, 0xb9, 0x1f, 0x79, 0xc9, 0x7c, 0x0d, 0x76, 0x1d, 0x75, 0x7e, 0x7d, 0x2b, 0x86, 0x84, 0x3d,
	0x07, 0x7f, 0x87, 0x54, 0xca, 0x82, 0x4f, 0x23, 0x27, 0x59, 0xae, 0x97, 0xe3, 0xcc, 0x8d, 0xa1,
	0x62, 0x48, 0xd9, 0x53, 0x98, 0x35, 0x52, 0x51, 0x7a, 0x2f, 0x8b, 0x9e, 0x07, 0x66, 0xdf, 0x40,
	0x83, 0x0b, 0x59, 0xf4, 0x3a, 0xd4, 0x3c, 0xa5, 0xbe, 0x41, 0x3e, 0xb3, 0xa1, 0x06, 0xdb, 0xbe,
	0x41, 0x76, 0x0a, 0x4b, 0xfc, 0xd9, 0x60, 0x4e, 0x69, 0x5e, 0x66, 0xad, 0x42, 0xe2, 0x60, 0x26,
	0x16, 0x96, 0x6e, 0x2c, 0x8c, 0xcf, 0xc0, 0xbd, 0xbe, 0xd5, 0x42, 0x1e, 0xb0, 0x1f, 0x85, 0x3c,
	0x60, 0xcf, 0x56, 0x30, 0xf9, 0x9e, 0x55, 0x1d, 0x1a, 0x1d, 0x33, 0x61, 0x9b, 0xf8, 0x0e, 0x16,
	0x83, 0x48, 0xd5, 0xc8, 0x5a, 0x21, 0x3b, 0x83, 0x60, 0x6f, 0x44, 0xff, 0x7b, 0xbe, 0x0e, 0x0f,
	0xde, 0xc4, 0x70, 0xb1, 0x9f, 0xd0, 0x96, 0x73, 0x59, 0x13, 0xd6, 0x34, 0x1c, 0x3b, 0xb6, 0xf1,
	0x2f, 0x08, 0xf6, 0xfe, 0x4e, 0xc0, 0xaf, 0xb0, 0xfe, 0x42, 0xa5, 0x39, 0x71, 0x21, 0x86, 0xee,
	0xc0, 0xab, 0xf7, 0x5f, 0xaf, 0x27, 0xe0, 0x2b, 0xca, 0xa8, 0x53, 0xfc, 0xd8, 0x3c, 0x60, 0xe8,
	0xd8, 0x33, 0x98, 0xdb, 0x2a, 0xcd, 0x65, 0x81, 0xe6, 0xe3, 0x4d, 0x04, 0x58, 0xb4, 0x91, 0x05,
	0xbe, 0x38, 0x05, 0xdf, 0xaa, 0x67, 0x53, 0xf0, 0xde, 0x5f, 0x6e, 0xc3, 0x23, 0x16, 0xc0, 0xf1,
	0xd5, 0xe5, 0xdb, 0x77, 0xa1, 0xa3, 0xab, 0x4f, 0x1f, 0x3f, 0x6f, 0x43, 0x77, 0xfd, 0x06, 0x26,
	0x46, 0x00, 0x7b, 0x3d, 0x16, 0xab, 0x71, 0x8b, 0xc3, 0x1b, 0xf6, 0xe4, 0xf1, 0x3f, 0xd4, 0xea,
	0x8a, 0x8f, 0x2e, 0xfc, 0x3f, 0xae, 0x77, 0xf5, 0xe1, 0xee, 0xde, 0xde, 0xcd, 0x57, 0x7f, 0x03,
	0x00, 0x00, 0xff, 0xff, 0x9c, 0x1b, 0x53, 0xf9, 0xb1, 0x02, 0x00, 0x00,
}
